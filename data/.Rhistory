subject_ids=c() # Store the subject id which has 11 files under the /T1w/Diffusion folder.
for(i in 1:length(subject_list)){
dir_info=hcp_list_dirs(paste0("HCP/",subject_list[i],"/T1w/Diffusion"))
#Contents key gives you the number of files under this folder.
loc_contents=which(names(dir_info$parsed_result$ListBucketResult)=='Contents')
#The following code is to record the maximum file size.
if (length(loc_contents)>0){
size_list=c()
for (j in 1:length(loc_contents)){
size_list=c(size_list, dir_info$parsed_result$ListBucketResult[[loc_contents[j]]]$Size)
}
size_info=c(size_info, max(as.numeric(unlist(size_list))))
subject_ids=c(subject_ids, subject_list[i])
}
else
size_info=c(size_info,NULL)
}
size_info
final_subjects
## Currently, dMRI of 435 subjects are abvailable in Amazon Database.  #length(subject_ids)
## Choose dMRI whose file size is greater than 1GB (1,000,000,000) - 90 gradient directions.
## 395 dMRI data satisfies the above criteria.
final_subjects=subject_ids[which(size_info>1000000000)]
final_subejcts
final_subjects
length(final_subjects)
subject_ids
?hcp_list_dirs
subject_list[1]
hcp_list_files('HCP/100206')
hcp_list_files('HCP/100206/Diffusion')
hcp_list_files('HCP/100206/T1w')
subject_list[2]
hcp_list_files('HCP/100307/T1w')
hcp_list_files('HCP/100307/')
hcp_list_files('HCP/100307/')$parsed_result$
## Currently, dMRI of 435 subjects are abvailable in Amazon Database.  #length(subject_ids)
## Choose dMRI whose file size is greater than 1GB (1,000,000,000) - 90 gradient directions.
## 395 dMRI data satisfies the above criteria.
final_subjects=subject_ids[which(size_info>1000000000)]
hcp_list_dirs('HCP/100307/')
example=hcp_list_dirs('HCP/100307/')
example$get_result
example$content
read.table('C:/Users/Seung/Desktop/subject_id.txt')
read.table('C:/Users/Seung/Desktop/subject_ids.txt')
subject_ids2=read.table('C:/Users/Seung/Desktop/subject_ids.txt')
final_subjects
subject_ids
subject_ids2
t(subejct_ids2)
t(subject_ids2)
as.vector(t(subject_ids2))
subject_ids2=as.vector(t(subject_ids2))
subject_ids2 %in% final_subjects
subject_ids2[subject_ids2 %in% final_subjects]
subject_ids3 = subject_ids2[subject_ids2 %in% final_subjects]
write.table(subject_ids3,'C:/Users/Seung/Desktop/subject_ids_download.txt')
?write.table
write.table(subject_ids3,'C:/Users/Seung/Desktop/subject_ids_download.txt', row.names=FALSE)
write.table(subject_ids3,'C:/Users/Seung/Desktop/subject_ids_download.txt', row.names=FALSE, col.names=FALSE)
read.table('C:/Users/Seung/Desktop/subject_ids_download.txt')
subject_ids=read.table('C:/Users/Seung/Desktop/subject_ids_download.txt')
subject_ids$V1
subject_ids=subject_ids$V1
for(id in subject_ids){
print(id)
}
for(id in subject_ids){
print(paste0("HCP/",id,"/T1w/Diffusion"))
}
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
#data_path = '/Users/jiepeng/Dropbox/CRCNS_projects/FDD_estimation/codes/BJS/data/'
#data_path = '/Users/seungyong/Dropbox/FDD_estimation/codes/BJS/data/'
data_path = 'C:/Users/Seung/Dropbox/FDD_estimation/codes/BJS/data/'
##load peak detection results from "example_HCP.py"
file_name= paste0(data_path,"corticospinal_tract_R 3.mat")
peak_result= readMat(file_name) #read matlab data into R
##format the peak detection results for the tracking algorithm
form_tractography<-function(result){
temp<-NULL
temp$braingrid<-result$braingrid
temp$loc<-result$loc
temp$map<-c(result$map)
temp$n.fiber<-c(result$n.fiber)
temp$n.fiber2<-c(result$n.fiber2)
temp$nn1<-c(result$nn1)
temp$nn2<-c(result$nn2)
temp$nn3<-c(result$nn3)
temp$rmap<-c(result$rmap)
temp$vec<-result$vec
temp$xgrid.sp<-c(result$xgrid.sp)
temp$ygrid.sp<-c(result$ygrid.sp)
temp$zgrid.sp<-c(result$zgrid.sp)
return(temp)
}
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
## Apply Tracking Algorithm
nproj = 1  ## skip nproj voxles before termination
our.track <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10) # elim.tresh:  return indices of tracks of at least elim.thres length: use this information for quicker plotting
tobj <- our.track
ndis <- length(tobj$sorted.iinds[tobj$sorted.update.ind])  # number of fibers at least of length elim.thres
ndis
## plot the tracking results: only plot those at least of length elim.thres
open3d()
for (iind in (tobj$sorted.iinds[tobj$sorted.update.ind])[1:ndis]){
cat(iind,"\n")
# plot
tractography(tobj$tracks1[[iind]]$inloc, tobj$tracks1[[iind]]$dir)
tractography(tobj$tracks2[[iind]]$inloc, tobj$tracks2[[iind]]$dir)
}
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
##load peak detection results from "example_HCP.py"
file_name= paste0(data_path,"corticospinal_tract_R_bjs.mat")
peak_result= readMat(file_name) #read matlab data into R
##format the peak detection results for the tracking algorithm
form_tractography<-function(result){
temp<-NULL
temp$braingrid<-result$braingrid
temp$loc<-result$loc
temp$map<-c(result$map)
temp$n.fiber<-c(result$n.fiber)
temp$n.fiber2<-c(result$n.fiber2)
temp$nn1<-c(result$nn1)
temp$nn2<-c(result$nn2)
temp$nn3<-c(result$nn3)
temp$rmap<-c(result$rmap)
temp$vec<-result$vec
temp$xgrid.sp<-c(result$xgrid.sp)
temp$ygrid.sp<-c(result$ygrid.sp)
temp$zgrid.sp<-c(result$zgrid.sp)
return(temp)
}
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
## Apply Tracking Algorithm
nproj = 1  ## skip nproj voxles before termination
our.track <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10) # elim.tresh:  return indices of tracks of at least elim.thres length: use this information for quicker plotting
tobj <- our.track
hist(tobj$lens[tobj$lens>0])
quantile(tobj$lens[tobj$lens>0])
save(tobj, fil=e='tobj_bjs12.Rdata')
save(tobj, file='tobj_bjs12.Rdata')
ndis <- length(tobj$sorted.iinds[tobj$sorted.update.ind])  # number of fibers at least of length elim.thres
ndis
length(tobj$lens[tobj$lens>40])
## plot the tracking results: only plot those at least of length elim.thres
open3d()
for (iind in (tobj$sorted.iinds[tobj$sorted.update.ind])[1:8649]){
cat(iind,"\n")
# plot
tractography(tobj$tracks1[[iind]]$inloc, tobj$tracks1[[iind]]$dir)
tractography(tobj$tracks2[[iind]]$inloc, tobj$tracks2[[iind]]$dir)
}
##load peak detection results from "example_HCP.py"
file_name= paste0(data_path,"corticospinal_tract_R_csd.mat")
peak_result= readMat(file_name) #read matlab data into R
##format the peak detection results for the tracking algorithm
form_tractography<-function(result){
temp<-NULL
temp$braingrid<-result$braingrid
temp$loc<-result$loc
temp$map<-c(result$map)
temp$n.fiber<-c(result$n.fiber)
temp$n.fiber2<-c(result$n.fiber2)
temp$nn1<-c(result$nn1)
temp$nn2<-c(result$nn2)
temp$nn3<-c(result$nn3)
temp$rmap<-c(result$rmap)
temp$vec<-result$vec
temp$xgrid.sp<-c(result$xgrid.sp)
temp$ygrid.sp<-c(result$ygrid.sp)
temp$zgrid.sp<-c(result$zgrid.sp)
return(temp)
}
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
## Apply Tracking Algorithm
nproj = 1  ## skip nproj voxles before termination
our.track <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10) # elim.tresh:  return indices of tracks of at least elim.thres length: use this information for quicker plotting
tobj <- our.track
save(tobj, file='tobj_csd12.Rdata')
quantile(tobj$lens[tobj$lens>0])
ndis <- length(tobj$sorted.iinds[tobj$sorted.update.ind])  # number of fibers at least of length elim.thres
ndis
## plot the tracking results: only plot those at least of length elim.thres
open3d()
for (iind in (tobj$sorted.iinds[tobj$sorted.update.ind])[1:3000]){
cat(iind,"\n")
# plot
tractography(tobj$tracks1[[iind]]$inloc, tobj$tracks1[[iind]]$dir)
tractography(tobj$tracks2[[iind]]$inloc, tobj$tracks2[[iind]]$dir)
}
##load peak detection results from "example_HCP.py"
file_name= paste0(data_path,"corticospinal_tract_R_ridge.mat")
peak_result= readMat(file_name) #read matlab data into R
##format the peak detection results for the tracking algorithm
form_tractography<-function(result){
temp<-NULL
temp$braingrid<-result$braingrid
temp$loc<-result$loc
temp$map<-c(result$map)
temp$n.fiber<-c(result$n.fiber)
temp$n.fiber2<-c(result$n.fiber2)
temp$nn1<-c(result$nn1)
temp$nn2<-c(result$nn2)
temp$nn3<-c(result$nn3)
temp$rmap<-c(result$rmap)
temp$vec<-result$vec
temp$xgrid.sp<-c(result$xgrid.sp)
temp$ygrid.sp<-c(result$ygrid.sp)
temp$zgrid.sp<-c(result$zgrid.sp)
return(temp)
}
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
## Apply Tracking Algorithm
nproj = 1  ## skip nproj voxles before termination
our.track <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10) # elim.tresh:  return indices of tracks of at least elim.thres length: use this information for quicker plotting
tobj <- our.track
save(tobj, file='tobj_ridge.Rdata')
hist(tobj$lens[tobj$lens>0])
quantile(tobj$lens[tobj$lens>0])
#172186
#176241
#174082
#184344 BJS10
#186217 BJS12
#186192 CSD12
#163724 Ridge
ndis <- length(tobj$sorted.iinds[tobj$sorted.update.ind])  # number of fibers at least of length elim.thres
ndis
length(tobj$lens[tobj$lens>40])
## plot the tracking results: only plot those at least of length elim.thres
open3d()
for (iind in (tobj$sorted.iinds[tobj$sorted.update.ind])[1:3000]){
cat(iind,"\n")
# plot
tractography(tobj$tracks1[[iind]]$inloc, tobj$tracks1[[iind]]$dir)
tractography(tobj$tracks2[[iind]]$inloc, tobj$tracks2[[iind]]$dir)
}
q()
library(dplyr)
library(ggpubr)
library(rstatix)
library(gridExtra)
dataset1=read.table('/Users/seungyong/Desktop/server/analysis_data.txt', header=T)
p1=ggplot(dataset1, aes(x=EHI, fill=Gender)) +
geom_histogram( binwidth=5, position='stack')+
ggtitle('EHI scores of the reselected sample')+
theme_bw()
p2=ggboxplot(dataset1, x = "Handedness", y = "EHI", color = "Gender") + #, palette = c("#00AFBB", "#E7B800")) +
geom_hline(yintercept=0, linetype=3, color='red') +
xlab("Handedness") + ylab("EHI score")
grid.arrange(p1,p2, nrow=1)
#SLF Number of Tracts
p1=ggboxplot(dataset1,  y = "SLF_L_Num") +
xlab("Left SLF") +
ylab("Number of Streamlines") +
ylim(0,4000)+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2=ggboxplot(dataset1,  y = "SLF_R_Num") +
xlab("Right SLF") +
ylab("") +
ylim(0,4000)+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p3=ggboxplot(dataset1, x = "Handedness", y = "SLF_L_Num", color = "Gender") +
xlab("Handedness") +
ylab("") +
ylim(0,4000)+
ggtitle('Left SLF')+
theme(legend.position = 'none')
p4=ggboxplot(dataset1, x = "Handedness", y = "SLF_R_Num", color = "Gender") +
xlab("Handedness") +
ylab("") +
ylim(0,4000)+
ggtitle('Right SLF')+
theme(legend.position = 'right')
grid.arrange(p1,p2,p3,p4, nrow=1, widths= c(0.2,0.2,0.25,0.35))
# Correlation plot Num Voxel, Tracts
p1 = ggplot(dataset1, aes(x=SLF_L_Num, y=SLF_L_Vox)) +
geom_point() +
xlab('# Streamlines') +
ylab('# Voxels') +
ggtitle(paste0('Left SLF \n Corr = ', round(cor(dataset1$SLF_L_Num, dataset1$SLF_L_Vox),2)))+
theme_classic()
p2 = ggplot(dataset1, aes(x=SLF_R_Num, y=SLF_R_Vox)) +
geom_point() +
xlab('# Streamlines') +
ylab('# Voxels') +
ggtitle(paste0('Right SLF \n Corr = ', round(cor(dataset1$SLF_R_Num, dataset1$SLF_R_Vox),2)))+
theme_classic()
p3 = ggplot(dataset1, aes(x=SLF_LAT_Num, y=SLF_LAT_Vox)) +
geom_point() +
xlab('Lateralization Score') +
ylab('Relative difference of Voxel') +
ggtitle(paste0('Relative difference of Voxel \n and Lateralization Score \n  Corr = ', round(cor(dataset1$SLF_LAT_Num, dataset1$SLF_LAT_Vox),2)))+
theme_classic()
grid.arrange(p1,p2,p3, nrow=1, widths= c(0.33,0.33,0.34))
#SLF Lateralization Score
p1=ggplot(dataset1, aes(x=SLF_LAT_Num)) +
xlab('Lateralization Score')+
geom_histogram()+
ggtitle('Histogram of Lateralization score')+
theme_bw()
p2=ggboxplot(dataset1,  y = "SLF_LAT_Num") +
xlab("") +
ylab("Lateralization Score") +
ggtitle('Entire Subjects')+
ylim(-1,1) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p3=ggboxplot(dataset1, x = "Handedness", y = "SLF_LAT_Num", color = "Gender") +
xlab("Handedness") +
ylab("") +
ylim(-1,1)+
ggtitle('Within group')+
theme(legend.position = 'right')
grid.arrange(p1,p2,p3, nrow=1, widths= c(0.25,0.25,0.5))
t.test(dataset1$SLF_LAT_Num)
t.test(dataset1$SLF_LAT_Num[dataset1$Gender=="F" & dataset1$Handedness == 'LH'])
t.test(dataset1$SLF_LAT_Num[dataset1$Gender=="F" & dataset1$Handedness == 'RH'])
t.test(dataset1$SLF_LAT_Num[dataset1$Gender=="M" & dataset1$Handedness == 'LH'])
t.test(dataset1$SLF_LAT_Num[dataset1$Gender=="M" & dataset1$Handedness == 'RH'])
SLF_anova=aov(SLF_LAT_Num ~ Handedness * Gender, data=dataset1)
summary(SLF_anova)
SLF_anova$residuals
plot(SLF_anova)
plot(SLF_anova$fitted.values, SLF_anova$residuals)
qqline(SLF_anova$residuals)
qqnorm(SLF_anova$residuals)
qqnorm(SLF_anova$residuals)
qqline(SLF_anova$residuals)
plot(SLF_anova$fitted.values, SLF_anova$residuals)
plot(SLF_anova$fitted.values, SLF_anova$residuals, ylab='Residuals', xlab='Fitted Value')
abline(h=0)
plot(SLF_anova$fitted.values, SLF_anova$residuals, ylab='Residuals', xlab='Fitted Value')
abline(h=0, col='red', lty=2)
qqnorm(SLF_anova$residuals)
qqline(SLF_anova$residuals)
par(mfrow=c(1,2))
plot(SLF_anova$fitted.values, SLF_anova$residuals, ylab='Residuals', xlab='Fitted Value')
abline(h=0, col='red', lty=2)
qqnorm(SLF_anova$residuals)
par(mfrow=c(1,2))
plot(SLF_anova$fitted.values, SLF_anova$residuals,
ylab='Residuals', xlab='Fitted Value',
main='Fitted Value vs Residuals')
abline(h=0, col='red', lty=2)
qqnorm(SLF_anova$residuals, main='Q-Q plot: residuals')
qqline(SLF_anova$residuals)
qqnorm(SLF_anova$residuals, main='Q-Q plot: residuals')
qqline(SLF_anova$residuals, col='red')
par(mfrow=c(1,2))
plot(SLF_anova$fitted.values, SLF_anova$residuals,
ylab='Residuals', xlab='Fitted Value',
main='Fitted Value vs Residuals')
abline(h=0, col='red', lty=2)
qqnorm(SLF_anova$residuals, main='Q-Q plot: residuals')
qqline(SLF_anova$residuals, col='red')
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
data_path = '/Users/seungyong/Dropbox/FDD_estimation/codes/BJS/data/'
file_name= paste0(data_path,"track_example.mat")
peak_result= readMat(file_name) #read matlab data into R
##format the peak detection results for the tracking algorithm
form_tractography<-function(result){
temp<-NULL
temp$braingrid<-result$braingrid
temp$loc<-result$loc
temp$map<-c(result$map)
temp$n.fiber<-c(result$n.fiber)
temp$n.fiber2<-c(result$n.fiber2)
temp$nn1<-c(result$nn1)
temp$nn2<-c(result$nn2)
temp$nn3<-c(result$nn3)
temp$rmap<-c(result$rmap)
temp$vec<-result$vec
temp$xgrid.sp<-c(result$xgrid.sp)
temp$ygrid.sp<-c(result$ygrid.sp)
temp$zgrid.sp<-c(result$zgrid.sp)
return(temp)
}
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
nproj = 1  ## skip nproj voxles before termination
tracts <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10, max.line=500)
#%%
open3d()
for(iind in (tracts$sorted.iinds[tracts$sorted.update.ind])){
cat(iind,"\n")
# plot
tractography(tracts$tracks1[[iind]]$inloc, tracts$tracks1[[iind]]$dir)
tractography(tracts$tracks2[[iind]]$inloc, tracts$tracks2[[iind]]$dir)
}
setwd("C:/Users/Jie/Dropbox/Projects/CRCNS_projects_2015_/SeungyongHwang_FDD_estimation/codes/BJS/example_scripts")
getwd()
setwd("C:/Users/Jie/Dropbox/Projects/CRCNS_projects_2015_/SeungyongHwang_FDD_estimation/codes/BJS/example_scripts")
setwd("C:/Users/Jie/Dropbox/Projects/CRCNS_projects_2015_/SeungyongHwang_FDD_estimation/codes/BJS/data")
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
devtools::install_github("vic-dragon/dmri.tracking")
remotes::install_github("vic-dragon/dmri.tracking@main")
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
remove.packages("dmri.tracking")
library(dmri.tracking)
#data_path = '/Users/seungyong/Dropbox/FDD_estimation/codes/BJS/data/'
data_path=""
##load peak detection results from "example_HCP.py"
file_name= paste0(data_path,"peak.mat")
file_name= paste0(data_path,"track_example.mat")
peak_result= readMat(file_name) #read matlab data into R
##format the peak detection results for the tracking algorithm
form_tractography<-function(result){
temp<-NULL
temp$braingrid<-result$braingrid
temp$loc<-result$loc
temp$map<-c(result$map)
temp$n.fiber<-c(result$n.fiber)
temp$n.fiber2<-c(result$n.fiber2)
temp$nn1<-c(result$nn1)
temp$nn2<-c(result$nn2)
temp$nn3<-c(result$nn3)
temp$rmap<-c(result$rmap)
temp$vec<-result$vec
temp$xgrid.sp<-c(result$xgrid.sp)
temp$ygrid.sp<-c(result$ygrid.sp)
temp$zgrid.sp<-c(result$zgrid.sp)
return(temp)
}
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
## Apply Tracking Algorithm
# It takaes 20 min on 2020 mac 16inch
# If you want to skip this step, you can load the attached Rdata file (tracts_SLF_L.Rdata)
nproj = 1  ## skip nproj voxles before termination
tracts <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10, max.line=500)
temp = form_tractography(peak_result)
## specify region to draw the tracking results
x_subr = 1:temp$nn1
y_subr = 1:temp$nn2
z_subr = 1:temp$nn3
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
remotes::install_github("vic-dragon/dmri.tracking@main")
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
nproj = 1  ## skip nproj voxles before termination
tracts <- v.track(v.obj=temp, xgrid.sp=temp$xgrid.sp, ygrid.sp=temp$ygrid.sp,
zgrid.sp=temp$zgrid.sp, braingrid=array(temp$braingrid,dim=c(3,length(x_subr),length(y_subr),length(z_subr))), elim=T, nproj=nproj,
vorient=c(1,1,1), elim.thres=10, max.line=500)
# elim.
rm(list=ls())
##load packages
library(R.matlab)
library(dmri.tracking)
library(rgl)
remove.packages("dmri.tracking")
remotes::install_github("vic-dragon/dmri.tracking@main")
rm(list=ls())
remotes::install_github("vic-dragon/dmri.tracking@main")
q()
